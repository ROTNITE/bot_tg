# app/runtime.py
from __future__ import annotations

import asyncio
import time
from typing import Dict, Tuple, Optional

from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message

from app.db.core import db

# ===================== Settings cache =====================

SETTINGS: Dict[str, str] = {}  # key -> value (—Å—Ç—Ä–æ–∫–∏, –∫–∞—Å—Ç–∏–º –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏)

DEFAULT_SETTINGS = {
    "inactivity_seconds": "180",   # ‚è±Ô∏è —Ç–∞–π–º-–∞—É—Ç –º–æ–ª—á–∞–Ω–∏—è
    "ref_bonus_points":   "20",    # üéØ —Ä–µ—Ñ-–±–æ–Ω—É—Å
    "daily_bonus_points": "10",    # üéÅ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
    "block_rounds":       "2",     # üîÅ —Å–∫–æ–ª—å–∫–æ ¬´—Ä–∞—É–Ω–¥–æ–≤¬ª –Ω–µ –º–∞—Ç—á–∏—Ç—å —Ç—É –∂–µ –ø–∞—Ä—É
    "support_enabled":    "1",     # üÜò –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–∞–ø–ø–æ—Ä—Ç (1/0)
}

async def load_settings_cache() -> None:
    """–ß–∏—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É settings –≤ –ø–∞–º—è—Ç—å, –¥–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π."""
    SETTINGS.clear()
    async with db() as conn:
        cur = await conn.execute("SELECT key, value FROM settings")
        for k, v in await cur.fetchall():
            SETTINGS[k] = str(v)

    # –ø—Ä–æ—Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç—ã, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç
    async with db() as conn:
        for k, v in DEFAULT_SETTINGS.items():
            if k not in SETTINGS:
                await conn.execute(
                    "INSERT OR REPLACE INTO settings(key,value) VALUES(?,?)",
                    (k, v),
                )
                SETTINGS[k] = v
        await conn.commit()

async def set_setting(key: str, value: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î –∏ –≤ –∫—ç—à–µ."""
    async with db() as conn:
        await conn.execute(
            "INSERT OR REPLACE INTO settings(key,value) VALUES(?,?)",
            (key, str(value)),
        )
        await conn.commit()
    SETTINGS[key] = str(value)

def g_inactivity() -> int:
    return int(SETTINGS.get("inactivity_seconds", DEFAULT_SETTINGS["inactivity_seconds"]))

def g_ref_bonus() -> int:
    return int(SETTINGS.get("ref_bonus_points", DEFAULT_SETTINGS["ref_bonus_points"]))

def g_daily_bonus() -> int:
    return int(SETTINGS.get("daily_bonus_points", DEFAULT_SETTINGS["daily_bonus_points"]))

def g_block_rounds() -> int:
    return int(SETTINGS.get("block_rounds", DEFAULT_SETTINGS["block_rounds"]))

def g_support_enabled() -> bool:
    return SETTINGS.get("support_enabled", DEFAULT_SETTINGS["support_enabled"]) == "1"

def intro_text() -> str:
    """–í–µ—Ä—Å–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    t = g_inactivity()
    return (
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: t.me/nektomephi\n\n"
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç <b>–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–ò–§–ò</b>.\n\n"
        "!!! –í –ù–ê–°–¢–û–Ø–©–ï–ï –í–†–ï–ú–Ø –†–ê–ë–û–¢–ê–ï–¢ –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï !!!\n"
        "–ë–æ—Ç <b>–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞</b> ‚Äî —ç—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞, "
        "—Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
        "–≠—Ç–æ –≥–∏–±—Ä–∏–¥ –¥–∞–π–≤–∏–Ω—á–∏–∫–∞ –∏ nekto.me: —Ç—ã –æ–±—â–∞–µ—à—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ, –∞ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º —Å–æ–≥–ª–∞—Å–∏–∏ "
        "–º–æ–∂–Ω–æ <b>—Ä–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏</b> —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É <code>!reveal</code> (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –æ–±–æ–∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–Ω–∫–µ—Ç—ã).\n\n"
        "üí° –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>.\n"
        "üìá –†–µ–∂–∏–º <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç</b> ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "‚öôÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.\n"
        "2Ô∏è‚É£ –ü–æ –∂–µ–ª–∞–Ω–∏—é –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É ‚Äî –æ–Ω–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è.\n"
        "3Ô∏è‚É£ –ù–∞–∂–º–∏ ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª –∏ –Ω–∞—á–Ω–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–∏–∞–ª–æ–≥.\n\n"
        "üí¨ –í–æ –≤—Ä–µ–º—è —á–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "<code>!next</code> ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
        "<code>!stop</code> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "<code>!reveal</code> ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ\n\n"
        f"‚ö†Ô∏è –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –º–æ–ª—á–∏—Ç –±–æ–ª–µ–µ {t} —Å–µ–∫—É–Ω–¥, –¥–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —É –æ–±–æ–∏—Ö."
    )

async def safe_edit_message(
    msg: Message, *, text: Optional[str] = None, reply_markup=None
) -> None:
    """
    –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –ò–≥–Ω–æ—Ä–∏—Ç 'message is not modified'.
    """
    try:
        current_text = msg.text or ""
        if text is not None and text != current_text:
            await msg.edit_text(text, reply_markup=reply_markup)
        elif reply_markup is not None:
            await msg.edit_reply_markup(reply_markup=reply_markup)
        # –∏–Ω–∞—á–µ –º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            return
        raise

# ===================== Runtime (RAM) =====================

_nowm = time.monotonic            # –º–æ–Ω–æ—Ç–æ–Ω–∏—á–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã (–¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤)
def _now() -> float:             # ¬´—Å—Ç–µ–Ω–Ω—ã–µ¬ª —Å–µ–∫—É–Ω–¥—ã (–¥–ª—è LAST_SEEN)
    return time.time()

# –ú–∞—Ç—á–µ–≤—ã–µ —Ç–∞–π–º–µ—Ä—ã/—Å—á—ë—Ç—á–∏–∫–∏
DEADLINE: Dict[int, float] = {}   # match_id -> monotonic deadline
LAST_SHOWN: Dict[int, int] = {}   # match_id -> –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—Å–µ–∫)

# –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
ACTIVE: Dict[int, Tuple[int, int]] = {}   # user_id -> (peer_id, match_id)
LAST_SEEN: Dict[int, float] = {}          # user_id -> last_seen_unix

# –í–æ—Ç—á–µ—Ä—ã/–æ–±—Ä–∞—Ç–Ω—ã–µ –æ—Ç—Å—á—ë—Ç—ã (—Ç–∞—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
WATCH: Dict[int, asyncio.Task] = {}              # match_id -> watcher task
WARNED: Dict[int, bool] = {}                     # match_id -> –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
COUNTDOWN_TASKS: Dict[int, asyncio.Task] = {}    # match_id -> countdown task
COUNTDOWN_MSGS: Dict[int, Tuple[Optional[int], Optional[int]]] = {}  # match_id -> (msg_id_a, msg_id_b)

# –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞ –≤ —Å–∞–ø–ø–æ—Ä—Ç–µ (msg_id –±–æ—Ç–∞ -> user_id)
SUPPORT_RELAY: Dict[int, int] = {}

__all__ = [
    # settings cache + utils
    "SETTINGS", "DEFAULT_SETTINGS", "load_settings_cache", "set_setting",
    "g_inactivity", "g_ref_bonus", "g_daily_bonus", "g_block_rounds", "g_support_enabled",
    "intro_text", "safe_edit_message",
    # runtime clocks
    "_nowm", "_now",
    # RAM structures
    "DEADLINE", "LAST_SHOWN", "ACTIVE", "LAST_SEEN", "WATCH", "WARNED",
    "COUNTDOWN_TASKS", "COUNTDOWN_MSGS", "SUPPORT_RELAY",
]
