# app/handlers/profile.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app import config as cfg
from app.db.repo import (
    ensure_user, get_user, get_user_or_create, get_points,
    get_status, get_status_inventory, count_referrals, purchases_summary,
    set_user_fields,
)
from app.keyboards.common import (
    gender_self_kb, seeking_kb, reveal_entry_menu, cancel_kb,
    statuses_kb,
)
from app.keyboards.admin import admin_reply_menu  # ‚¨ÖÔ∏è —Ä–∞–Ω—å—à–µ —Ç—è–Ω—É–ª–∏ admin_main_kb –∏–∑ common
from app.services.matching import in_queue, format_profile_text
from app.states import GState, RevealForm
from app.services.reveal_form import start_reveal_form

router = Router(name="profile")

# ‚Ä¶–∏ –Ω–∏–∂–µ –ø–æ —Ç–µ–∫—Å—Ç—É: –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ, –≥–¥–µ –±—ã–ª–æ `reply_markup=admin_main_kb()`,
# –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ `reply_markup=admin_reply_menu()`.

@router.message(Command("profile"))
@router.message(F.text.in_({"üë§ –ê–Ω–∫–µ—Ç–∞", "–ê–Ω–∫–µ—Ç–∞"}))
async def show_or_edit_reveal(m: Message, state: FSMContext):
    # –ê–¥–º–∏–Ω–∞–º –ø—Ä–æ—Ñ–∏–ª—å (–∞–Ω–∫–µ—Ç—ã) –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Ç–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª—å
    from app.db.repo import get_role
    role = await get_role(m.from_user.id)
    if role == "admin" or m.from_user.id in cfg.ADMIN_IDS:
        await m.answer("–†–∞–∑–¥–µ–ª ¬´–ê–Ω–∫–µ—Ç–∞¬ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –û—Ç–∫—Ä–æ–π /admin.", reply_markup=admin_reply_menu())
        return

    if not await ensure_user(m.from_user.id):
        # ensure_user –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None ‚Äî –≤—Å—ë –æ–∫, –ø—Ä–æ—Å—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        pass

    if await in_queue(m.from_user.id):
        await m.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
        return

    u = await get_user(m.from_user.id)
    if not u or not u[1] or not u[2]:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª.", reply_markup=gender_self_kb())
        await state.update_data(start_form_after_prefs=True, is_refill=False)
        await state.set_state(GState.pick_gender)
        if not (m.from_user.username or ""):
            await m.answer("‚ÑπÔ∏è –î–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω @username. –ï–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    ready = bool(u[3]) if u else False
    if not ready:
        await m.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ú–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å.", reply_markup=reveal_entry_menu())
        return

    txt = format_profile_text(u)
    photos = [p for p in (u[10], u[11], u[12]) if p]
    if photos:
        for p in photos[:-1]:
            await m.answer_photo(p)
        await m.answer_photo(photos[-1], caption=txt)
    else:
        await m.answer(txt)
    await m.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reveal_entry_menu())


@router.message(F.text.in_({"‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å / –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å / –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å"}))
async def fill_or_refill_btn(m: Message, state: FSMContext):
    from app.services.subscription_gate import gate_subscription
    if not await gate_subscription(m):
        return

    await ensure_user(m.from_user.id)

    if await in_queue(m.from_user.id):
        await m.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
        return

    u = await get_user(m.from_user.id)
    if not u or not u[1] or not u[2]:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ–º —Ç–≤–æ–π –ø–æ–ª.", reply_markup=gender_self_kb())
        await state.update_data(start_form_after_prefs=True, is_refill=False, refill_mode=False)
        await state.set_state(GState.pick_gender)
        if not (m.from_user.username or ""):
            await m.answer("‚ÑπÔ∏è –î–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω @username. –ï–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    ready = bool(u[3])
    await state.update_data(refill_mode=ready, is_refill=ready)

    # –¥–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω username ‚Äî –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º
    await start_reveal_form(m, state, is_refill=ready)


# ====== –í—ã–±–æ—Ä –ø–æ–ª–∞/–∫–æ–≥–æ –∏—â–µ—à—å (GState) ======

@router.message(GState.pick_gender)
async def pick_gender_msg(m: Message, state: FSMContext):
    from app.db.repo import set_user_fields
    await ensure_user(m.from_user.id)
    text = (m.text or "").strip().casefold()
    if text not in {"—è –¥–µ–≤—É—à–∫–∞", "—è –ø–∞—Ä–µ–Ω—å"}:
        await m.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: ¬´–Ø –¥–µ–≤—É—à–∫–∞¬ª –∏–ª–∏ ¬´–Ø –ø–∞—Ä–µ–Ω—å¬ª.", reply_markup=gender_self_kb())
        return
    gender = "–î–µ–≤—É—à–∫–∞" if text == "—è –¥–µ–≤—É—à–∫–∞" else "–ü–∞—Ä–µ–Ω—å"

    data = await state.get_data()
    if data.get("refill_mode"):
        await state.update_data(new_gender=gender)
    else:
        await set_user_fields(m.from_user.id, gender=gender)

    await m.answer("–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", reply_markup=seeking_kb())
    await state.set_state(GState.pick_seeking)


@router.message(GState.pick_seeking)
async def pick_seeking_msg(m: Message, state: FSMContext):
    from app.db.repo import set_user_fields
    await ensure_user(m.from_user.id)
    text_raw = (m.text or "").strip()
    text = text_raw.capitalize()
    if text not in {"–î–µ–≤—É—à–∫–∏", "–ü–∞—Ä–Ω–∏", "–ù–µ –≤–∞–∂–Ω–æ"}:
        await m.answer("–í—ã–±–µ—Ä–∏: ¬´–î–µ–≤—É—à–∫–∏¬ª, ¬´–ü–∞—Ä–Ω–∏¬ª –∏–ª–∏ ¬´–ù–µ –≤–∞–∂–Ω–æ¬ª.", reply_markup=seeking_kb())
        return

    data = await state.get_data()
    refill_mode = data.get("refill_mode")
    if refill_mode:
        await state.update_data(new_seeking=text)
        await start_reveal_form(m, state, is_refill=True)
        return

    await set_user_fields(m.from_user.id, seeking=text)
    after_prefs = data.get("start_form_after_prefs", False)
    is_refill = data.get("is_refill", False)
    await state.update_data(start_form_after_prefs=False)
    await state.clear()

    if after_prefs:
        await start_reveal_form(m, state, is_refill=is_refill)
        return

    from . import menu_for
    await m.answer("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=(await menu_for(m.from_user.id)))


# ====== –ì–ª–æ–±–∞–ª—å–Ω–∞—è ¬´–û—Ç–º–µ–Ω–∞¬ª ======
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def global_cancel(m: Message, state: FSMContext):
    from . import menu_for
    from app.services.matching import in_queue, dequeue
    from app.states import SupportState

    # –ï—Å–ª–∏ –≤ —á–∞—Ç–µ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Ä–∞–∑—Ä—É–ª–∏—Ç)
    from app.services.matching import active_peer
    if await active_peer(m.from_user.id):
        return

    cur_state = await state.get_state()
    data = await state.get_data()
    refill_mode = bool(data.get("refill_mode"))

    # 1) –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ä–º–µ –∞–Ω–∫–µ—Ç—ã ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    if cur_state in {
        RevealForm.name.state, RevealForm.faculty.state, RevealForm.age.state,
        RevealForm.about.state, RevealForm.photos.state,
    }:
        await state.clear()
        if refill_mode:
            await m.answer("–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°—Ç–∞—Ä–∞—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=(await menu_for(m.from_user.id)))
        else:
            await set_user_fields(
                m.from_user.id, reveal_ready=0,
                first_name=None, last_name=None, faculty=None,
                age=None, about=None, photo1=None, photo2=None, photo3=None
            )
            await m.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=(await menu_for(m.from_user.id)))
        return

    # 2) –ï—Å–ª–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if cur_state == SupportState.waiting.state:
        await state.clear()
        await m.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.", reply_markup=(await menu_for(m.from_user.id)))
        return

    # 3) –ï—Å–ª–∏ —Å—Ç–æ–∏—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    if await in_queue(m.from_user.id):
        await dequeue(m.from_user.id)
        await m.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=(await menu_for(m.from_user.id)))
        return

    # 4) –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—é
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=(await menu_for(m.from_user.id)))
