# app/handlers/start_help.py
from __future__ import annotations

from typing import Optional

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app import config as cfg
from app.db.repo import (
    ensure_user, get_user, add_points, register_referral,
    inviter_by_code, set_user_fields,
)
from app.keyboards.common import main_menu, gender_self_kb, subscription_kb
from app.runtime import intro_text
from app.services.subscription_gate import gate_subscription, is_subscribed
from app.states import GState

router = Router(name="start_help")


@router.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    # –ü–∞–Ω–µ–ª—å/–º–µ–Ω—é –∞–¥–º–∏–Ω–∞ –Ω–µ –ª–æ–º–∞–µ–º, –Ω–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –±–ª–æ–∫–∏ —Ä–∞–∑—Ä—É–ª–∏—Ç chat.relay
    if not await gate_subscription(m):
        return

    await ensure_user(m.from_user.id)

    # deep-link /start r_<code> | ref_<id>
    try:
        parts = (m.text or "").split(maxsplit=1)
        if len(parts) == 2:
            arg = parts[1]
            inviter_id: Optional[int] = None
            if arg.startswith("r_"):
                inviter_id = await inviter_by_code(arg[2:])
            elif arg.startswith("ref_"):
                inviter_id = int(arg[4:])
            if inviter_id and await register_referral(inviter_id, m.from_user.id):
                from app.runtime import g_ref_bonus  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å –≤—Å—ë
                await add_points(inviter_id, g_ref_bonus())
                try:
                    await m.bot.send_message(inviter_id, f"üéâ –ü–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à—ë–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! +{g_ref_bonus()} –æ—á–∫–æ–≤.")
                except Exception:
                    pass
    except Exception:
        pass

    u = await get_user(m.from_user.id)
    if not u or not u[1] or not u[2]:
        await m.answer(intro_text(), disable_web_page_preview=True)
        await m.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ–º —Ç–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å. –ó–∞—Ç–µ–º, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏.",
            reply_markup=gender_self_kb()
        )
        await state.update_data(start_form_after_prefs=True, is_refill=False)
        await state.set_state(GState.pick_gender)
        if not (m.from_user.username or ""):
            await m.answer("‚ÑπÔ∏è –î–ª—è –¥–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ (–∞–Ω–∫–µ—Ç—ã) –Ω—É–∂–µ–Ω @username –≤ Telegram. –ï–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∂–µ.")
        return

    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())


@router.message(Command("help"))
async def cmd_help(m: Message):
    from . import menu_for
    await m.answer(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å\n\n"
        "–û—Å–Ω–æ–≤–Ω–æ–µ:\n"
        "‚Ä¢ /profile ‚Äî —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –±–∞–ª–∞–Ω—Å, –ø–æ–∫—É–ø–∫–∏\n"
        "‚Ä¢ /market ‚Äî –º–∞–≥–∞–∑–∏–Ω —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π\n"
        "‚Ä¢ /ref ‚Äî —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç:\n"
        "‚Ä¢ ¬´üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç¬ª ‚Üí ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª\n"
        "‚Ä¢ !next ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
        "‚Ä¢ !stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç\n"
        "‚Ä¢ !reveal ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ (–µ—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã —É –æ–±–æ–∏—Ö)\n\n"
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è:\n"
        "‚Ä¢ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.",
        reply_markup=(await menu_for(m.from_user.id))
    )


@router.callback_query(F.data == "sub_check")
async def sub_check(c: CallbackQuery):
    await ensure_user(c.from_user.id)
    await set_user_fields(c.from_user.id, sub_verified=1)

    ok = False
    try:
        from app.services.subscription_gate import is_subscribed
        ok = await is_subscribed(c.message.bot, c.from_user.id)  # ‚¨ÖÔ∏è –ø–µ—Ä–µ–¥–∞—ë–º bot
    except Exception:
        pass

    try:
        await c.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!" if ok else "‚úÖ –ì–æ—Ç–æ–≤–æ.")
    except Exception:
        pass

    await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
    await c.message.bot.send_message(
        c.from_user.id, intro_text(), disable_web_page_preview=True, reply_markup=main_menu()
    )
