# app/handlers/support.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app import config as cfg
from app.db.core import db
from app.keyboards.common import cancel_kb
from app.keyboards.admin import admin_reply_menu  # ‚¨ÖÔ∏è
from app.states import SupportState

router = Router(name="support")
# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...


@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_entry(m: Message, state: FSMContext):
    from app.db.repo import get_role
    role = await get_role(m.from_user.id)
    if role == "admin" or m.from_user.id in cfg.ADMIN_IDS:
        await m.answer("–î–ª—è –∞–¥–º–∏–Ω–æ–≤ –µ—Å—Ç—å ¬´üß∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª –≤–Ω—É—Ç—Ä–∏ /admin.", reply_markup=admin_reply_menu())
        return
    await state.clear()
    await state.set_state(SupportState.waiting)
    await m.answer(
        "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º/–ø—Ä–æ–±–ª–µ–º–æ–π ‚Äî —è –ø–µ—Ä–µ—à–ª—é –∞–¥–º–∏–Ω–∞–º.\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –Ω–∞–∂–º–∏ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=cancel_kb()
    )


@router.message(SupportState.waiting)
async def support_collect(m: Message, state: FSMContext):
    from app.runtime import SUPPORT_RELAY
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with db() as conn:
        cur = await conn.execute(
            "INSERT INTO support_msgs(from_user, text) VALUES(?,?)",
            (m.from_user.id, m.text or "")
        )
        _row_id = cur.lastrowid
        await conn.commit()

    # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in (cfg.ADMIN_IDS or []):
        sent = await m.bot.send_message(
            admin_id,
            f"üÜò –ó–∞–ø—Ä–æ—Å –æ—Ç {m.from_user.id} (@{m.from_user.username or '‚Äî'}):\n\n{m.text}"
        )
        SUPPORT_RELAY[sent.message_id] = m.from_user.id

    await m.answer("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞.")


@router.message(F.text == "/done")
async def support_done(m: Message):
    async with db() as conn:
        await conn.execute(
            "UPDATE support_msgs SET status='closed' WHERE from_user=? AND status='open'",
            (m.from_user.id,)
        )
        await conn.commit()
    await m.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø–∏—à–∏ —Å–Ω–æ–≤–∞: ¬´üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª.")
