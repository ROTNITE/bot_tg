# app/handlers/admin/shop.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.db.repo import list_items, add_item, del_item
from app.keyboards.admin import admin_shop_kb
from app.runtime import safe_edit_message
from app.services.admin import require_admin
from app.states import AdminAddItem, AdminShopDel

router = Router(name="admin_shop")


@router.callback_query(F.data == "admin:shop")
async def admin_shop(c: CallbackQuery, state: FSMContext):
    if not await require_admin(c):
        return
    await safe_edit_message(c.message, text="üõç –ú–∞–≥–∞–∑–∏–Ω", reply_markup=admin_shop_kb())


@router.callback_query(F.data == "admin:shop:list")
async def admin_shop_list(c: CallbackQuery):
    if not await require_admin(c):
        return
    items = await list_items()
    txt = "üì¶ –¢–æ–≤–∞—Ä—ã:\n" + ("\n".join([f"{i[0]}. {i[1]} ‚Äî {i[2]}üí∞ [{i[3]}] {i[4] or ''}" for i in items]) or "–ø—É—Å—Ç–æ")
    await safe_edit_message(c.message, text=txt, reply_markup=admin_shop_kb())


@router.callback_query(F.data == "admin:shop:add")
async def admin_shop_add(c: CallbackQuery, state: FSMContext):
    if not await require_admin(c):
        return
    await state.set_state(AdminAddItem.wait_name)
    await c.message.edit_text("üß© –®–∞–≥ 1/4: –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–∞–º—ã–π –°–∫—Ä–æ–º–Ω—ã–π</code>")


@router.message(AdminAddItem.wait_name)
async def admin_shop_add_name(m: Message, state: FSMContext):
    await state.update_data(name=(m.text or "").strip())
    await state.set_state(AdminAddItem.wait_price)
    await m.answer("üß© –®–∞–≥ 2/4: –¶–µ–Ω–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>50</code>")


@router.message(AdminAddItem.wait_price)
async def admin_shop_add_price(m: Message, state: FSMContext):
    try:
        price = int((m.text or "").strip())
        if price < 0:
            raise ValueError
    except Exception:
        return await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    await state.update_data(price=price)
    await state.set_state(AdminAddItem.wait_type)
    await m.answer("üß© –®–∞–≥ 3/4: –¢–∏–ø ‚Äî –Ω–∞–ø–∏—à–∏ <code>status</code> –∏–ª–∏ <code>privilege</code>")


@router.message(AdminAddItem.wait_type)
async def admin_shop_add_type(m: Message, state: FSMContext):
    t = (m.text or "").strip().lower()
    if t not in {"status", "privilege"}:
        return await m.answer("–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <code>status</code> –∏–ª–∏ <code>privilege</code>.")
    await state.update_data(type=t)
    await state.set_state(AdminAddItem.wait_payload)
    await m.answer("üß© –®–∞–≥ 4/4: Payload ‚Äî —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞/–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏")


@router.message(AdminAddItem.wait_payload)
async def admin_shop_add_payload(m: Message, state: FSMContext):
    d = await state.get_data()
    await add_item(d["name"], d["price"], d["type"], (m.text or "").strip())
    await state.clear()
    await m.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_shop_kb())


@router.callback_query(F.data == "admin:shop:del")
async def admin_shop_del(c: CallbackQuery, state: FSMContext):
    if not await require_admin(c):
        return
    await state.set_state(AdminShopDel.wait_id)
    await c.message.edit_text("–û—Ç–ø—Ä–∞–≤—å ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª–∏—Ç—å (—Å–º. ¬´üì¶ –°–ø–∏—Å–æ–∫¬ª).")


@router.message(AdminShopDel.wait_id)
async def admin_shop_del_id(m: Message, state: FSMContext):
    try:
        await del_item(int((m.text or "").strip()))
        await m.answer("üóë –£–¥–∞–ª–µ–Ω–æ.", reply_markup=admin_shop_kb())
    except Exception:
        await m.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å ID.", reply_markup=admin_shop_kb())
    await state.clear()
