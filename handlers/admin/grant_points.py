# app/handlers/admin/grant_points.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.keyboards.admin import admin_main_kb
from app.services.admin import require_admin, grant_points_and_notify
from app.states import AdminGrantPoints

router = Router(name="admin_grant")


@router.callback_query(F.data == "admin:grant")
async def admin_grant_start(c: CallbackQuery, state: FSMContext):
    if not await require_admin(c):
        return
    await state.set_state(AdminGrantPoints.wait_user_id)
    await c.message.edit_text("üí≥ –ö–æ–º—É –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏? –í–≤–µ–¥–∏ <code>tg_id</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@router.message(AdminGrantPoints.wait_user_id)
async def admin_grant_user(m: Message, state: FSMContext):
    if not await require_admin(m):
        await state.clear()
        return
    try:
        uid = int((m.text or "").strip())
    except Exception:
        return await m.answer("–ù—É–∂–µ–Ω —Ü–µ–ª—ã–π <code>tg_id</code>. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
    await state.update_data(grant_uid=uid)
    await state.set_state(AdminGrantPoints.wait_amount)
    await m.answer(f"–°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –Ω–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid}</code>? "
                   "–ú–æ–∂–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã —Å–ø–∏—Å–∞—Ç—å.")


@router.message(AdminGrantPoints.wait_amount)
async def admin_grant_amount(m: Message, state: FSMContext):
    if not await require_admin(m):
        await state.clear()
        return
    try:
        amount = int((m.text or "").strip())
    except Exception:
        return await m.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ -20). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
    data = await state.get_data()
    uid = int(data.get("grant_uid"))
    new_pts = await grant_points_and_notify(m.bot, uid, amount)
    await state.clear()
    await m.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{uid}</code>: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {amount} –æ—á–∫–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_pts}.",
        reply_markup=admin_main_kb()
    )


@router.message(AdminGrantPoints.wait_user_id, F.text.in_({"‚ùå –û—Ç–º–µ–Ω–∞", "üõ† –ê–¥–º–∏–Ω", "/admin"}))
@router.message(AdminGrantPoints.wait_amount,  F.text.in_({"‚ùå –û—Ç–º–µ–Ω–∞", "üõ† –ê–¥–º–∏–Ω", "/admin"}))
async def admin_grant_cancel(m: Message, state: FSMContext):
    if not await require_admin(m):
        await state.clear()
        return
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_main_kb())


@router.message(Command("grant"))
async def admin_grant_cmd(m: Message):
    if not await require_admin(m):
        return
    # –§–æ—Ä–º–∞—Ç: /grant <tg_id> <amount> [reason...]
    parts = (m.text or "").strip().split(maxsplit=3)
    if len(parts) < 3:
        return await m.answer("–§–æ—Ä–º–∞—Ç: <code>/grant &lt;tg_id&gt; &lt;amount&gt; [reason]</code>\n"
                              "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/grant 123456789 50 –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</code>")
    try:
        _, uid_s, amt_s, *maybe_reason = parts
        uid = int(uid_s)
        amount = int(amt_s)
        reason = maybe_reason[0] if maybe_reason else ""
    except Exception:
        return await m.answer("–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>/grant 123456789 50 –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</code>")

    new_pts = await grant_points_and_notify(m.bot, uid, amount, reason)
    await m.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid}</code> {'–Ω–∞—á–∏—Å–ª–µ–Ω–æ' if amount>=0 else '—Å–ø–∏—Å–∞–Ω–æ'} {abs(amount)} –æ—á–∫–æ–≤."
        f"\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_pts}."
    )
