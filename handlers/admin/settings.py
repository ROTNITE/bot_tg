# app/handlers/admin/settings.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.keyboards.common import admin_settings_kb
from app.runtime import safe_edit_message, g_support_enabled
from app.services.admin import require_admin, set_numeric_setting

from app.runtime import set_setting  # –¥–ª—è support_toggle
from app.states import AdminSettings

router = Router(name="admin_settings")


@router.callback_query(F.data == "admin:settings")
async def admin_settings(c: CallbackQuery, state: FSMContext):
    if not await require_admin(c):
        return
    await safe_edit_message(c.message, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=admin_settings_kb())


@router.callback_query(F.data.startswith("admin:set:"))
async def admin_settings_select(c: CallbackQuery, state: FSMContext):
    if not await require_admin(c):
        return

    key = c.data.split(":", 2)[2]
    if key == "support_toggle":
        await set_setting("support_enabled", "0" if g_support_enabled() else "1")
        await safe_edit_message(c.message, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=admin_settings_kb())
        return

    await state.set_state(AdminSettings.wait_value)
    await state.update_data(key=key)
    nice = {
        "inactivity_seconds": "‚è±Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–µ–∫)",
        "block_rounds": "üîÅ –ë–ª–æ–∫-—Ä–∞—É–Ω–¥–æ–≤",
        "daily_bonus_points": "üéÅ Daily –±–æ–Ω—É—Å",
        "ref_bonus_points": "üéØ Referral –±–æ–Ω—É—Å",
    }.get(key, key)
    await c.message.edit_text(f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: <b>{nice}</b>\n(—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")


@router.message(AdminSettings.wait_value)
async def admin_settings_set(m: Message, state: FSMContext):
    if not await require_admin(m):
        await state.clear()
        return
    d = await state.get_data()
    key = d.get("key")
    try:
        val = int((m.text or "").strip())
        if val < 0:
            raise ValueError
    except Exception:
        return await m.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
    await set_numeric_setting(key, val)
    await state.clear()
    await m.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=admin_settings_kb())
