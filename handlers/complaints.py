# app/handlers/complaints.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.db.core import db
from app.keyboards.common import (
    rate_or_complain_kb,
    post_chat_actions_kb,
    rate_stars_kb,
    cancel_kb,
)
from app.runtime import safe_edit_message
from app.states import ComplaintState

router = Router(name="complaints")


# ------ –ö–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç-—á–∞—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ ------

@router.callback_query(F.data.regexp(r"^rate:\d+:\d$"))
async def cb_rate(c: CallbackQuery):
    try:
        _, mid_s, stars_s = c.data.split(":")
        mid = int(mid_s); stars = int(stars_s)
        assert 1 <= stars <= 5
    except Exception:
        return await c.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.", show_alert=True)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ –∏ —É–∑–Ω–∞—ë–º peer
    async with db() as conn:
        cur = await conn.execute("SELECT a_id,b_id FROM matches WHERE id=?", (mid,))
        row = await cur.fetchone()
    if not row:
        return await c.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    a_id, b_id = int(row[0]), int(row[1])
    if c.from_user.id not in (a_id, b_id):
        return await c.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –¥–∏–∞–ª–æ–≥.", show_alert=True)

    to_user = b_id if c.from_user.id == a_id else a_id

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É (–æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –º–∞—Ç—á)
    try:
        async with db() as conn:
            await conn.execute(
                "INSERT OR IGNORE INTO ratings(match_id,from_user,to_user,stars) VALUES(?,?,?,?)",
                (mid, c.from_user.id, to_user, stars)
            )
            await conn.commit()
    except Exception:
        pass

    try:
        await safe_edit_message(c.message, text="–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=None)
    except Exception:
        pass
    await c.answer("–û—Ü–µ–Ω–∫–∞ —É—á—Ç–µ–Ω–∞.")


@router.callback_query(F.data.regexp(r"^postfb:rate:\d+$"))
async def postfb_rate(c: CallbackQuery):
    mid = int(c.data.split(":")[2])
    try:
        await safe_edit_message(
            c.message,
            text="–ü–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É (1‚Äì5):",
            reply_markup=rate_stars_kb(mid)
        )
    except Exception:
        pass
    await c.answer()


@router.callback_query(F.data.regexp(r"^postfb:complain:\d+$"))
async def postfb_complain(c: CallbackQuery, state: FSMContext):
    mid = int(c.data.split(":")[2])
    # –Ω–∞–π–¥—ë–º —É—á–∞—Å—Ç–Ω–∏–∫–∞-¬´–≤—Ç–æ—Ä–æ–≥–æ¬ª, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏ –±—É–¥–µ—Ç –∂–∞–ª–æ–±–∞
    async with db() as conn:
        cur = await conn.execute("SELECT a_id,b_id FROM matches WHERE id=?", (mid,))
        row = await cur.fetchone()
    if not row:
        return await c.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    a_id, b_id = int(row[0]), int(row[1])
    about_id = b_id if c.from_user.id == a_id else a_id

    await state.set_state(ComplaintState.wait_text)
    await state.update_data(mid=mid, about_id=about_id)

    try:
        await safe_edit_message(c.message, text="–û–ø–∏—à–∏ –∂–∞–ª–æ–±—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ.", reply_markup=None)
    except Exception:
        pass
    await c.answer()


@router.callback_query(F.data.regexp(r"^postfb:skip:\d+$"))
async def postfb_skip(c: CallbackQuery):
    try:
        await safe_edit_message(c.message, text="–û–∫, –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏. –°–ø–∞—Å–∏–±–æ!", reply_markup=None)
    except Exception:
        pass
    await c.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ.")


@router.callback_query(F.data.regexp(r"^postfb:back:\d+$"))
async def postfb_back(c: CallbackQuery):
    mid = int(c.data.split(":")[2])
    try:
        await safe_edit_message(
            c.message,
            text="–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –¥–∏–∞–ª–æ–≥–æ–º?",
            reply_markup=post_chat_actions_kb(mid)
        )
    except Exception:
        pass
    await c.answer()


# ------ –¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã ------

@router.message(ComplaintState.wait_text)
async def complaint_text(m: Message, state: FSMContext):
    from app import config as cfg
    from app.handlers import menu_for
    d = await state.get_data()
    mid = int(d.get("mid")); about_id = int(d.get("about_id"))
    text = (m.text or "").strip()

    async with db() as conn:
        await conn.execute(
            "INSERT INTO complaints(match_id,from_user,about_user,text) VALUES(?,?,?,?)",
            (mid, m.from_user.id, about_id, text)
        )
        await conn.commit()

    # —à–ª—ë–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in (cfg.ADMIN_IDS or []):
        try:
            await m.bot.send_message(
                admin_id,
                f"üö© –ñ–∞–ª–æ–±–∞ –æ—Ç <code>{m.from_user.id}</code> –Ω–∞ <code>{about_id}</code>\n"
                f"–ú–∞—Ç—á: <code>{mid}</code>\n\n{text}"
            )
        except Exception:
            pass

    await state.clear()
    await m.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º. –°–ø–∞—Å–∏–±–æ!", reply_markup=(await menu_for(m.from_user.id)))


# –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def rate_from_menu(m: Message):
    from app.handlers import menu_for
    from app.services.matching import last_match_info
    if not await last_match_info(m.from_user.id):
        return await m.answer("–ü–æ–∫–∞ –Ω–µ —Å –∫–µ–º ‚Äî –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–æ–≤.", reply_markup=(await menu_for(m.from_user.id)))
    mid, _peer, _active = await last_match_info(m.from_user.id)

    # –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–∞—Ç—á
    async with db() as conn:
        cur = await conn.execute("SELECT 1 FROM ratings WHERE match_id=? AND from_user=?", (mid, m.from_user.id))
        done = await cur.fetchone()
    if done:
        return await m.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ª–æ–≥ —É–∂–µ –æ—Ü–µ–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=(await menu_for(m.from_user.id)))

    await m.answer("–û—Ü–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=rate_or_complain_kb(mid))


@router.message(F.text == "üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")
async def complain_from_menu(m: Message, state: FSMContext):
    from app.handlers import menu_for
    from app.services.matching import last_match_info
    info = await last_match_info(m.from_user.id)
    if not info:
        return await m.answer("–ü–æ–∫–∞ –Ω–µ –Ω–∞ –∫–æ–≥–æ ‚Äî –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–æ–≤.", reply_markup=(await menu_for(m.from_user.id)))
    mid, peer, _active = info
    await state.set_state(ComplaintState.wait_text)
    await state.update_data(mid=mid, about_id=peer)
    await m.answer("–û–ø–∏—à–∏ –∂–∞–ª–æ–±—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ.", reply_markup=cancel_kb())
