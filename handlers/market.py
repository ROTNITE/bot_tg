# app/handlers/market.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from app.db.core import db
from app.db.repo import (
    list_items, get_item, get_points, add_points,
    add_status_to_inventory, set_status,
)
from app.keyboards.common import shop_kb
from app.handlers import menu_for
from app.db.repo import get_role

router = Router(name="market")


@router.message(Command("market"))
async def cmd_market(m: Message):
    if await get_role(m.from_user.id) == "admin":
        return await m.answer("–¢—ã –∞–¥–º–∏–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π /admin.", reply_markup=(await menu_for(m.from_user.id)))
    items = await list_items()
    if not items:
        return await m.answer("üõç –ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –ø—É—Å—Ç.", reply_markup=(await menu_for(m.from_user.id)))
    await m.answer("üõç –ú–∞–≥–∞–∑–∏–Ω —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π. –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:", reply_markup=shop_kb(items))


@router.callback_query(F.data.startswith("shop_buy:"))
async def shop_buy(c: CallbackQuery):
    if await get_role(c.from_user.id) == "admin":
        await c.answer("–ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.", show_alert=True)
        return

    item_id = int(c.data.split(":")[1])
    item = await get_item(item_id)
    if not item:
        await c.answer("–¢–æ–≤–∞—Ä —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return

    _id, name, price, type_, payload = item
    pts = await get_points(c.from_user.id)
    if pts < price:
        await c.answer(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—á–∫–æ–≤. –ù—É–∂–Ω–æ {price}, —É —Ç–µ–±—è {pts}.", show_alert=True)
        return

    await add_points(c.from_user.id, -price)
    applied_msg = ""
    if type_ == "status":
        # –ö–ª–∞–¥—ë–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ —Å—Ä–∞–∑—É —ç–∫–∏–ø–∏—Ä—É–µ–º
        await add_status_to_inventory(c.from_user.id, payload)
        await set_status(c.from_user.id, payload)
        applied_msg = f"–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å: ¬´{payload}¬ª. (–î–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å)"
    elif type_ == "privilege":
        applied_msg = f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {payload}"

    async with db() as conn:
        await conn.execute("INSERT INTO purchases(user_id,item_id) VALUES(?,?)", (c.from_user.id, _id))
        await conn.commit()

    new_pts = await get_points(c.from_user.id)
    try:
        await c.message.edit_text(
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ ¬´{name}¬ª –∑–∞ {price}üí∞ —É—Å–ø–µ—à–Ω–∞!\n{applied_msg}\n–ë–∞–ª–∞–Ω—Å: {new_pts}.", reply_markup=None
        )
    except Exception:
        pass
    await c.answer("–ì–æ—Ç–æ–≤–æ!")
