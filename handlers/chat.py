# app/handlers/chat.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import BaseFilter

from app.keyboards.common import cancel_kb, main_menu, gender_self_kb
from app.keyboards.admin import admin_reply_menu
from app import config as cfg

from app.services.feedback import send_post_chat_feedback
from app.services.matching import (
    active_peer, _materialize_session_if_needed, end_current_chat,
    record_separation, enqueue, try_match_now,
)
from app.services.inactivity import _stop_countdown as stop_countdown
from app.runtime import (
    DEADLINE, LAST_SHOWN, WARNED, COUNTDOWN_TASKS, COUNTDOWN_MSGS,
    _now as now_wall, _nowm, g_inactivity,
)
from app.db.repo import get_role, get_user

router = Router(name="chat")


# --------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ---------

MENU_TEXTS = {
    "üß≠ –†–µ–∂–∏–º—ã", "–†–µ–∂–∏–º—ã",
    "üë§ –ê–Ω–∫–µ—Ç–∞", "–ê–Ω–∫–µ—Ç–∞",
    "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
    "üìá –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç",
    "üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç", "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç",
    "üí∞ –ë–∞–ª–∞–Ω—Å", "–ë–∞–ª–∞–Ω—Å",
    "‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "–û—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
    "üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è",
    "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    "üõ† –ê–¥–º–∏–Ω", "üõ†Ô∏è –ê–¥–º–∏–Ω", "–ê–¥–º–∏–Ω",
    "üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
}


class InActiveChat(BaseFilter):
    """–§–∏–ª—å—Ç—Ä: –∞–ø–¥–µ–π—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç."""
    async def __call__(self, m: Message) -> bool:
        return (await active_peer(m.from_user.id)) is not None


async def has_required_prefs(uid: int) -> bool:
    u = await get_user(uid)
    return bool(u and u[1] and u[2])


async def _menu_for(user_id: int):
    role = await get_role(user_id)
    return admin_reply_menu() if (role == "admin" or user_id in cfg.ADMIN_IDS) else main_menu()


# --------- –ö–ù–û–ü–ö–ê: ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª (–≤–Ω–µ —á–∞—Ç–∞) ---------

@router.message(F.text.in_({"üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"}))
async def start_search(m: Message, state: FSMContext):
    # —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ ‚Äî –º—è–≥–∫–∏–π –±–ª–æ–∫
    if await active_peer(m.from_user.id):
        await _materialize_session_if_needed(m.from_user.id)
        await m.answer(cfg.BLOCK_TXT, reply_markup=ReplyKeyboardRemove())
        return

    # –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª/–∫–æ–≥–æ –∏—â–µ—à—å
    if not await has_required_prefs(m.from_user.id):
        await m.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.", reply_markup=gender_self_kb())
        return

    # —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–±–æ—Ä
    u = await get_user(m.from_user.id)
    await enqueue(m.from_user.id, u[1], u[2])
    await m.answer("–ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=cancel_kb())
    await try_match_now(m.from_user.id)


# --------- –ë–ª–æ–∫–∞—Ç–æ—Ä—ã –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ ---------

@router.message(InActiveChat(), F.text.in_(MENU_TEXTS))
async def block_menu_buttons_in_chat(m: Message):
    await _materialize_session_if_needed(m.from_user.id)
    await m.answer(cfg.BLOCK_TXT, reply_markup=ReplyKeyboardRemove())


@router.message(InActiveChat(), F.text.startswith("/"))
async def block_slash_cmds_in_chat(m: Message):
    await _materialize_session_if_needed(m.from_user.id)
    await m.answer(cfg.BLOCK_TXT, reply_markup=ReplyKeyboardRemove())


# --------- –†–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥—ã !stop/!next/!reveal (–≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞) ---------

@router.message(InActiveChat())
async def relay_chat(m: Message, state: FSMContext):
    # –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ–º RAM-—Å–µ—Å—Å–∏—é
    materialized = await _materialize_session_if_needed(m.from_user.id)
    if not materialized:
        return
    peer, mid = materialized

    # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –º–æ–ª—á–∞–Ω–∏—è –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    DEADLINE[mid] = _nowm() + g_inactivity()
    LAST_SHOWN.pop(mid, None)

    now = now_wall()  # noqa: F841  # (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ LAST_SEEN –¥–µ–ª–∞–µ—Ç _materialize_session_if_needed)

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
    await stop_countdown(mid, m.from_user.id, peer, delete_msgs=True)
    WARNED.pop(mid, None)
    t = COUNTDOWN_TASKS.pop(mid, None)
    if t and not t.done():
        t.cancel()
    COUNTDOWN_MSGS.pop(mid, None)

    # –í–Ω—É—Ç—Ä–∏—á–∞—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if m.text:
        ttxt = m.text.strip().lower()
        if ttxt == "!stop":
            a = m.from_user.id
            b = peer
            await end_current_chat(a)
            from app.services.matching import _cleanup_match  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            _cleanup_match(mid, a, b)
            await send_post_chat_feedback(a, b, mid)
            await send_post_chat_feedback(b, a, mid)
            await m.answer(
                "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏ ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.",
                reply_markup=(await _menu_for(a))
            )
            await m.bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=(await _menu_for(b)))
            return

        if ttxt == "!next":
            a = m.from_user.id
            b = peer
            if not await has_required_prefs(a):
                await end_current_chat(a)
                from app.services.matching import _cleanup_match
                _cleanup_match(mid, a, b)
                await send_post_chat_feedback(a, b, mid)
                await send_post_chat_feedback(b, a, mid)
                await m.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.", reply_markup=gender_self_kb())
                await m.bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=(await _menu_for(b)))
                return
            await record_separation(a, b)
            await end_current_chat(a)
            from app.services.matching import _cleanup_match
            _cleanup_match(mid, a, b)
            me = await get_user(a)
            await enqueue(a, me[1], me[2])
            await m.answer("–ò—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=cancel_kb())
            await m.bot.send_message(
                b,
                "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—à—ë–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.",
                reply_markup=(await _menu_for(b))
            )
            await try_match_now(a)
            return

        if ttxt == "!reveal":
            await _handle_reveal(m.from_user.id, peer)
            return

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π
    await _relay_payload(m, peer)


# --------- –ö–æ–º–∞–Ω–¥—ã !stop/!next/!reveal, –µ—Å–ª–∏ RAM –µ—â—ë –Ω–µ —É—Å–ø–µ–ª –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è ---------

@router.message(F.text.regexp(r"^!(stop|next|reveal)\b"))
async def bang_commands_when_db_active(m: Message, state: FSMContext):
    # –ï—Å–ª–∏ RAM —É–∂–µ –µ—Å—Ç—å ‚Äî relay_chat –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
    from app.runtime import ACTIVE
    if m.from_user.id in ACTIVE:
        return

    mat = await _materialize_session_if_needed(m.from_user.id)
    if not mat:
        await m.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.")
        return

    peer, mid = mat
    txt = (m.text or "").strip().lower()

    if txt.startswith("!stop"):
        a = m.from_user.id
        b = peer
        await end_current_chat(a)
        from app.services.matching import _cleanup_match
        _cleanup_match(mid, a, b)
        await send_post_chat_feedback(a, b, mid)
        await send_post_chat_feedback(b, a, mid)
        await m.answer(
            "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏ ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=(await _menu_for(m.from_user.id))
        )
        await m.bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=(await _menu_for(b)))
        return

    if txt.startswith("!next"):
        a = m.from_user.id
        b = peer
        if not await has_required_prefs(a):
            await end_current_chat(a)
            from app.services.matching import _cleanup_match
            _cleanup_match(mid, a, b)
            await send_post_chat_feedback(a, b, mid)
            await send_post_chat_feedback(b, a, mid)
            await m.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.", reply_markup=gender_self_kb())
            await m.bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=(await _menu_for(b)))
            return
        await record_separation(a, b)
        await end_current_chat(a)
        from app.services.matching import _cleanup_match
        _cleanup_match(mid, a, b)
        me = await get_user(a)
        await enqueue(a, me[1], me[2])
        await m.answer("–ò—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=cancel_kb())
        await m.bot.send_message(
            b,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—à—ë–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.",
            reply_markup=(await _menu_for(b))
        )
        await try_match_now(a)
        return

    if txt.startswith("!reveal"):
        await _handle_reveal(m.from_user.id, peer)
        return


# --------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏ reveal ---------

async def _relay_payload(m: Message, peer: int):
    from app.services.matching import send_text_anonym, clean_cap
    if m.text:
        await send_text_anonym(peer, m.text)
    elif m.photo:
        await m.bot.send_photo(peer, m.photo[-1].file_id, caption=clean_cap(m.caption), protect_content=True)
    elif m.animation:
        await m.bot.send_animation(peer, m.animation.file_id, caption=clean_cap(m.caption), protect_content=True)
    elif m.video:
        await m.bot.send_video(peer, m.video.file_id, caption=clean_cap(m.caption), protect_content=True)
    elif m.audio:
        await m.bot.send_audio(peer, m.audio.file_id, caption=clean_cap(m.caption), protect_content=True)
    elif m.voice:
        await m.bot.send_voice(peer, m.voice.file_id, caption=clean_cap(m.caption), protect_content=True)
    elif m.video_note:
        await m.bot.send_video_note(peer, m.video_note.file_id, protect_content=True)
    elif m.document:
        await m.bot.send_document(peer, m.document.file_id, caption=clean_cap(m.caption), protect_content=True)
    elif m.contact or m.location or m.venue or m.poll or m.dice or m.game:
        await m.answer("–≠—Ç–æ—Ç —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á—ë–Ω –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ.")


async def _handle_reveal(me_id: int, peer_id: int):
    from app.db.core import db
    me = await get_user(me_id)
    peer = await get_user(peer_id)
    if not (me and peer and me[3] == 1 and peer[3] == 1):
        from aiogram import Bot
        await Bot.get_current().send_message(me_id, "–†–∞—Å–∫—Ä—ã—Ç–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: —É –æ–¥–Ω–æ–≥–æ –∏–∑ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞.")
        return

    async with db() as conn:
        cur = await conn.execute(
            "SELECT id,a_id,b_id,a_reveal,b_reveal FROM matches "
            "WHERE active=1 AND (a_id=? OR b_id=?) ORDER BY id DESC LIMIT 1",
            (me_id, me_id)
        )
        row = await cur.fetchone()
        if not row:
            from aiogram import Bot
            await Bot.get_current().send_message(me_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.")
            return
        mid, a, b, ar, br = row
        is_a = (me_id == a)

        if (is_a and ar == 1) or ((not is_a) and br == 1):
            from aiogram import Bot
            await Bot.get_current().send_message(me_id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
            return

        if is_a:
            await conn.execute("UPDATE matches SET a_reveal=1 WHERE id=?", (mid,))
        else:
            await conn.execute("UPDATE matches SET b_reveal=1 WHERE id=?", (mid,))
        await conn.commit()

        cur = await conn.execute("SELECT a_reveal,b_reveal FROM matches WHERE id=?", (mid,))
        ar, br = await cur.fetchone()

    from aiogram import Bot
    if ar == 1 and br == 1:
        await _send_reveal_card(a, peer_id)
        await _send_reveal_card(b, me_id)
        await Bot.get_current().send_message(a, "–í–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        await Bot.get_current().send_message(b, "–í–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    else:
        await Bot.get_current().send_message(me_id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º —Å–æ–≥–ª–∞—Å–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")


async def _send_reveal_card(to_id: int, whose_id: int):
    from aiogram import Bot
    from app.services.matching import format_profile_text
    from app.db.repo import get_user
    u = await get_user(whose_id)
    if not u:
        await Bot.get_current().send_message(to_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    txt = format_profile_text(u)
    photos = [p for p in (u[10], u[11], u[12]) if p]
    if photos:
        for p in photos[:-1]:
            await Bot.get_current().send_photo(to_id, p, protect_content=True)
        await Bot.get_current().send_photo(to_id, photos[-1], caption=txt, protect_content=True, parse_mode=None)
    else:
        await Bot.get_current().send_message(
            to_id, txt, parse_mode=None, disable_web_page_preview=True, protect_content=True
        )
