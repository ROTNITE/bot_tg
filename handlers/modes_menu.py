# app/handlers/modes_menu.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app import config as cfg
from app.db.repo import get_role
from app.keyboards.common import modes_kb, anon_chat_menu_kb
from app.keyboards.admin import admin_reply_menu  # ‚¨ÖÔ∏è
from app.services.subscription_gate import gate_subscription

router = Router(name="modes_menu")
# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

@router.message(F.text.in_({"üß≠ –†–µ–∂–∏–º—ã", "–†–µ–∂–∏–º—ã"}))
async def modes_entry(m: Message, state: FSMContext):
    if (await get_role(m.from_user.id) == "admin") or m.from_user.id in cfg.ADMIN_IDS:
        await m.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∞–¥–º–∏–Ω—É. –û—Ç–∫—Ä–æ–π –ø–∞–Ω–µ–ª—å: /admin", reply_markup=admin_reply_menu())
        return
    if not await gate_subscription(m):
        return
    await state.clear()
    await m.answer(
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n\n"
        "<b>üìá –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç</b> ‚Äî –ª–µ–Ω—Ç–∞ –∞–Ω–∫–µ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n"
        "<b>üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b> ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è",
        reply_markup=modes_kb()
    )


@router.message(F.text.in_({"üìá –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç"}))
async def mode_cards(m: Message):
    await m.answer("–†–∞–∑–¥–µ–ª ¬´–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç¬ª ‚Äî <b>–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>.", reply_markup=modes_kb())


@router.message(F.text.in_({"üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç", "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç"}))
async def mode_anon_chat(m: Message):
    if (await get_role(m.from_user.id) == "admin") or m.from_user.id in cfg.ADMIN_IDS:
        await m.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∞–¥–º–∏–Ω—É. –û—Ç–∫—Ä–æ–π –ø–∞–Ω–µ–ª—å: /admin", reply_markup=admin_reply_menu())
        return
    if not await gate_subscription(m):
        return
    await m.answer(
        "–†–µ–∂–∏–º ¬´–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç¬ª. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=anon_chat_menu_kb()
    )


@router.message(F.text.in_({"‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}))
async def back_to_main_menu(m: Message, state: FSMContext):
    from . import menu_for
    await state.clear()
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=(await menu_for(m.from_user.id)))
