# app/services/subscription_gate.py
from __future__ import annotations

from typing import Optional

from aiogram import Bot
from aiogram.types import Message

from app.config import CHANNEL_USERNAME
from app.db.core import db
from app.keyboards.common import subscription_kb

# –ö—ç—à –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ ID –∫–∞–Ω–∞–ª–∞ (—É—Å–∫–æ—Ä—è–µ—Ç –∏ —É—Å—Ç–æ–π—á–∏–≤ –∫ —Å–º–µ–Ω–µ @username)
_RESOLVED_CHANNEL_ID: Optional[int] = None


async def _resolve_channel_id(bot: Bot) -> Optional[int]:
    global _RESOLVED_CHANNEL_ID
    if _RESOLVED_CHANNEL_ID is not None:
        return _RESOLVED_CHANNEL_ID
    try:
        chat = await bot.get_chat(CHANNEL_USERNAME)
        _RESOLVED_CHANNEL_ID = chat.id
    except Exception:
        _RESOLVED_CHANNEL_ID = None
    return _RESOLVED_CHANNEL_ID


async def is_subscribed(bot: Bot, user_id: int) -> bool:
    """
    –†–µ–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ.
    –ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID (–µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–∑–æ–ª–≤–∏—Ç—å),
    –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ CHANNEL_USERNAME.
    """
    target = await _resolve_channel_id(bot) or CHANNEL_USERNAME
    try:
        cm = await bot.get_chat_member(target, user_id)
        status = str(getattr(cm, "status", "")).lower()
        if status in ("member", "administrator", "creator"):
            return True
        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π ChatMember
        if hasattr(cm, "is_member") and bool(getattr(cm, "is_member")):
            return True
        return False
    except Exception:
        # –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º ¬´–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω¬ª
        return False


async def gate_subscription(message: Message) -> bool:
    """
    ¬´–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –≤–æ—Ä–æ—Ç–∞¬ª. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ –≤ –ë–î
    —Å—Ç–æ–∏—Ç —Ñ–ª–∞–≥ users.sub_verified=1. –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤—É –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    uid = message.from_user.id
    async with db() as conn:
        cur = await conn.execute(
            "SELECT COALESCE(sub_verified,0) FROM users WHERE tg_id=?",
            (uid,),
        )
        row = await cur.fetchone()

    if bool(row and row[0]):
        return True

    await message.answer(
        "üîî –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
        reply_markup=subscription_kb(),
    )
    return False


__all__ = ["is_subscribed", "gate_subscription"]
