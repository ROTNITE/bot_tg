# app/services/reveal_form.py
from __future__ import annotations

from typing import Awaitable, Callable, Dict, Optional, List

from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.config import FACULTIES
from app.db.repo import (
    set_user_fields,
    get_user_or_create,
    get_user,
)
from app.keyboards.common import (
    faculties_kb,
    about_kb,
    photos_empty_kb,
    photos_progress_kb,
    cancel_kb,
    main_menu,
)
from app.states import RevealForm


# ============= –ö–æ–Ω—Ç–µ–∫—Å—Ç (–∫–æ–ª–ª–±–µ–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è) =============
# –ù—É–∂–µ–Ω, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å —Å—é–¥–∞ –ª–æ–≥–∏–∫—É —Ä–æ–ª–µ–π/–º–µ–Ω—é –∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ü–∏–∫–ª—ã –∏–º–ø–æ—Ä—Ç–æ–≤.
_MenuFor = Callable[[int], Awaitable]

_CTX: Dict[str, object] = {"menu_for": None}


def init_reveal_form(menu_for: _MenuFor) -> None:
    """
    –ü–µ—Ä–µ–¥–∞–π —Å—é–¥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é menu_for(user_id) -> ReplyKeyboardMarkup.
    """
    _CTX["menu_for"] = menu_for


def _menu_for() -> _MenuFor:
    f = _CTX["menu_for"]
    # –ï—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ menu_for ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É main_menu()
    if f is None:
        async def _fallback(_: int):
            return main_menu()
        return _fallback  # type: ignore[return-value]
    return f  # type: ignore[return-value]


# ============= –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã =============

async def _require_username(m: Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å @username ‚Äî –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –∞–Ω–∫–µ—Ç—ã/—Ä–∞—Å–∫—Ä—ã—Ç–∏—è.
    """
    uname = m.from_user.username or ""
    if uname:
        return True
    await m.answer(
        "‚ÑπÔ∏è –î–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω @username –≤ Telegram.\n"
        "–û—Ç–∫—Ä–æ–π ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª, —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –∏ –≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞.",
        reply_markup=await _menu_for()(m.from_user.id),
    )
    return False


# ============= –ü—É–±–ª–∏—á–Ω—ã–µ —à–∞–≥–∏ FSM –∞–Ω–∫–µ—Ç—ã =============

async def start_reveal_form(m: Message, state: FSMContext, *, is_refill: bool) -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–Ω–∫–µ—Ç—É (–Ω–æ–≤—É—é –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ).
    """
    await m.answer(
        "–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è. –ï—ë —É–≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º !reveal.\n"
        "–ê–Ω–∫–µ—Ç—É –Ω–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π ‚Äî –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=cancel_kb(),
    )
    await m.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=cancel_kb())
    await state.update_data(is_refill=is_refill)
    await state.set_state(RevealForm.name)


async def rf_name(m: Message, state: FSMContext) -> None:
    parts = (m.text or "").strip().split()
    first = parts[0] if parts else ""
    last = " ".join(parts[1:]) if len(parts) > 1 else ""

    data = await state.get_data()
    if data.get("refill_mode"):
        await state.update_data(new_first=first, new_last=last)
    else:
        await set_user_fields(m.from_user.id, first_name=first, last_name=last)

    await m.answer("–° –∫–∞–∫–æ–≥–æ —Ç—ã –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞?", reply_markup=faculties_kb())
    await state.set_state(RevealForm.faculty)


async def rf_fac(c: CallbackQuery, state: FSMContext) -> None:
    idx = int((c.data or "fac:0").split(":")[1])
    fac = FACULTIES[idx]

    data = await state.get_data()
    if data.get("refill_mode"):
        await state.update_data(new_faculty=fac)
    else:
        await set_user_fields(c.from_user.id, faculty=fac)

    await c.message.edit_text(f"–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{fac}</b>")
    await c.message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=cancel_kb())
    await state.set_state(RevealForm.age)
    await c.answer()


async def rf_age(m: Message, state: FSMContext) -> None:
    try:
        age = int((m.text or "").strip())
        if not (17 <= age <= 99):
            raise ValueError
    except Exception:
        await m.answer("–í–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º 17‚Äì99, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_kb())
        return

    data = await state.get_data()
    if data.get("refill_mode"):
        await state.update_data(new_age=age)
    else:
        await set_user_fields(m.from_user.id, age=age)

    u = await get_user_or_create(m.from_user.id)
    refill = bool(data.get("is_refill"))
    has_prev_about = bool(u[8])

    await m.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
        reply_markup=about_kb(refill=refill, has_prev=has_prev_about),
    )
    await state.set_state(RevealForm.about)


async def rf_about_skip(m: Message, state: FSMContext) -> None:
    data = await state.get_data()
    uname = m.from_user.username or ""
    if data.get("refill_mode"):
        await state.update_data(new_about=None, new_username=(f"@{uname}" if uname else None))
    else:
        await set_user_fields(m.from_user.id, about=None)
        await set_user_fields(m.from_user.id, username=(f"@{uname}" if uname else None))

    u = await get_user_or_create(m.from_user.id)
    refill = bool(data.get("is_refill"))
    has_prev_photos = bool(u[10] or u[11] or u[12])

    await m.answer(
        "–ü—Ä–∏—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ).",
        reply_markup=photos_empty_kb(refill=refill, has_prev=has_prev_photos),
    )
    await state.set_state(RevealForm.photos)


async def rf_about_keep(m: Message, state: FSMContext) -> None:
    u = await get_user(m.from_user.id)
    if not u or not u[8]:
        await m.answer(
            "–û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ ‚Äî –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ—á–µ–≥–æ. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
            reply_markup=about_kb(refill=False, has_prev=False),
        )
        return

    data = await state.get_data()
    refill = bool(data.get("is_refill"))
    has_prev_photos = bool(u[10] or u[11] or u[12])

    await m.answer(
        "–ü—Ä–∏—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ).",
        reply_markup=photos_empty_kb(refill=refill, has_prev=has_prev_photos),
    )
    await state.set_state(RevealForm.photos)


async def rf_about(m: Message, state: FSMContext) -> None:
    text_raw = (m.text or "").strip()

    if text_raw.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        return await rf_about_skip(m, state)

    if text_raw and len(text_raw) > 300:
        await m.answer("–°–¥–µ–ª–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–æ—á–µ (‚â§300 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    data = await state.get_data()
    uname = m.from_user.username or ""
    if data.get("refill_mode"):
        await state.update_data(new_about=(text_raw or None), new_username=(f"@{uname}" if uname else None))
    else:
        await set_user_fields(m.from_user.id, about=(text_raw or None))
        await set_user_fields(m.from_user.id, username=(f"@{uname}" if uname else None))

    u = await get_user(m.from_user.id)
    refill = bool(data.get("is_refill"))
    has_prev_photos = bool(u[10] or u[11] or u[12])

    await m.answer(
        "–ü—Ä–∏—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ).",
        reply_markup=photos_empty_kb(refill=refill, has_prev=has_prev_photos),
    )
    await state.set_state(RevealForm.photos)


async def rf_photos_keep(m: Message, state: FSMContext) -> None:
    data = await state.get_data()
    if data.get("refill_mode"):
        await _commit_staged_profile(m.from_user.id, data, keep_old_photos=True)
        await state.clear()
        await m.answer(
            "–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (—Ñ–æ—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –ø—Ä–µ–∂–Ω–∏–µ). –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.",
            reply_markup=await _menu_for()(m.from_user.id),
        )
        return

    await set_user_fields(m.from_user.id, reveal_ready=1)
    await state.clear()
    await m.answer(
        "–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–æ—Å—Ç–∞–≤–∏–ª–∏ –ø—Ä–µ–∂–Ω–∏–µ —Ñ–æ—Ç–æ). –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.",
        reply_markup=await _menu_for()(m.from_user.id),
    )


async def rf_photos(m: Message, state: FSMContext) -> None:
    data = await state.get_data()
    file_id = m.photo[-1].file_id

    if data.get("refill_mode"):
        photos: List[str] = list(data.get("new_photos") or [])
        if len(photos) < 3:
            photos.append(file_id)
            await state.update_data(new_photos=photos)
            idx = len(photos)
            if idx < 3:
                await m.answer(f"–§–æ—Ç–æ {idx} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ï—â—ë?", reply_markup=photos_progress_kb())
            else:
                await m.answer("–§–æ—Ç–æ 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=photos_progress_kb())
        else:
            await m.answer("–£–∂–µ –µ—Å—Ç—å 3 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=photos_progress_kb())
        return

    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –ø–∏—à–µ–º –ø—Ä—è–º–æ –≤ –ë–î –ø–æ –º–µ—Ä–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    u = await get_user_or_create(m.from_user.id)
    current = [u[10], u[11], u[12]]
    if current[0] is None:
        await set_user_fields(m.from_user.id, photo1=file_id)
        await m.answer("–§–æ—Ç–æ 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ï—â—ë?", reply_markup=photos_progress_kb())
    elif current[1] is None:
        await set_user_fields(m.from_user.id, photo2=file_id)
        await m.answer("–§–æ—Ç–æ 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ï—â—ë?", reply_markup=photos_progress_kb())
    elif current[2] is None:
        await set_user_fields(m.from_user.id, photo3=file_id)
        await m.answer("–§–æ—Ç–æ 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=photos_progress_kb())
    else:
        await m.answer("–£–∂–µ –µ—Å—Ç—å 3 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=photos_progress_kb())


async def rf_photos_reset(m: Message, state: FSMContext) -> None:
    data = await state.get_data()
    if data.get("refill_mode"):
        await state.update_data(new_photos=[])
        await m.answer(
            "–í—Å–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ (–¥–æ 3).",
            reply_markup=photos_empty_kb(refill=True, has_prev=True),
        )
        return

    await set_user_fields(m.from_user.id, photo1=None, photo2=None, photo3=None)
    await m.answer(
        "–í—Å–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ (–¥–æ 3).",
        reply_markup=photos_empty_kb(refill=False, has_prev=False),
    )


async def rf_photos_done(m: Message, state: FSMContext) -> None:
    if not await _require_username(m):
        return

    data = await state.get_data()
    if data.get("refill_mode"):
        u = await get_user(m.from_user.id)
        old_have = bool(u and (u[10] or u[11] or u[12]))
        new_photos = data.get("new_photos") or []
        if not new_photos and not old_have:
            await m.answer(
                "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
                reply_markup=photos_empty_kb(refill=True, has_prev=False),
            )
            return

        await _commit_staged_profile(m.from_user.id, data, keep_old_photos=(len(new_photos) == 0))
        await state.clear()
        await m.answer(
            "–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.",
            reply_markup=await _menu_for()(m.from_user.id),
        )
        return

    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ë–î —É–∂–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ
    u = await get_user(m.from_user.id)
    photos = [u[10], u[11], u[12]] if u else [None, None, None]
    if not any(photos):
        await m.answer(
            "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=photos_empty_kb(refill=False, has_prev=False),
        )
        return

    await set_user_fields(m.from_user.id, reveal_ready=1)
    await state.clear()
    await m.answer(
        "–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.",
        reply_markup=await _menu_for()(m.from_user.id),
    )


# ============= –ö–æ–º–º–∏—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ (–ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ) =============

async def _commit_staged_profile(tg_id: int, staged: dict, *, keep_old_photos: bool = False) -> None:
    """
    –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç staged-–ø–æ–ª—è –∏–∑ FSM –≤ users.* (–∏ –æ—Ç–º–µ—á–∞–µ—Ç reveal_ready=1).
    –ï—Å–ª–∏ keep_old_photos=False –∏ –µ—Å—Ç—å new_photos ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç photo1..photo3.
    """
    fields: Dict[str, object] = {}

    if "new_gender" in staged:
        fields["gender"] = staged["new_gender"]
    if "new_seeking" in staged:
        fields["seeking"] = staged["new_seeking"]
    if "new_first" in staged:
        fields["first_name"] = staged["new_first"]
    if "new_last" in staged:
        fields["last_name"] = staged["new_last"]
    if "new_faculty" in staged:
        fields["faculty"] = staged["new_faculty"]
    if "new_age" in staged:
        fields["age"] = staged["new_age"]
    if "new_about" in staged:
        fields["about"] = staged["new_about"]
    if "new_username" in staged:
        fields["username"] = staged["new_username"]

    if not keep_old_photos:
        photos: List[str] = staged.get("new_photos") or []
        if photos:
            fields["photo1"] = photos[0] if len(photos) > 0 else None
            fields["photo2"] = photos[1] if len(photos) > 1 else None
            fields["photo3"] = photos[2] if len(photos) > 2 else None

    fields["reveal_ready"] = 1
    await set_user_fields(tg_id, **fields)


__all__ = [
    "init_reveal_form",
    "start_reveal_form",
    "rf_name",
    "rf_fac",
    "rf_age",
    "rf_about",
    "rf_about_skip",
    "rf_about_keep",
    "rf_photos",
    "rf_photos_keep",
    "rf_photos_reset",
    "rf_photos_done",
    "_commit_staged_profile",
]
