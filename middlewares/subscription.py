# app/middlewares/subscription.py
from __future__ import annotations

from typing import Any, Awaitable, Callable, Dict, Union

from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from aiogram import Bot

from app.config import ADMIN_IDS
from app.db.core import db
from app.db.repo import get_role
from app.keyboards.common import subscription_kb


class SubscriptionGuard(BaseMiddleware):
    """
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –∞–ø–¥–µ–π—Ç—ã, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ ¬´–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É¬ª.
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç:
      ‚Ä¢ /start
      ‚Ä¢ callback —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "sub_check" (–∫–Ω–æ–ø–∫–∞ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª)
    –ê–¥–º–∏–Ω–∞–º –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.
    """
    def __init__(self):
        self.allowed_cmds = {"start"}
        self.allowed_callbacks_prefixes = {"sub_check"}

    async def __call__(
        self,
        handler: Callable[[Union[Message, CallbackQuery], Dict[str, Any]], Awaitable[Any]],
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any],
    ) -> Any:
        user = getattr(event, "from_user", None)
        if not user:
            return await handler(event, data)
        user_id = user.id

        # 1) –ê–¥–º–∏–Ω–∞–º ‚Äî –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ
        if user_id in ADMIN_IDS or (await get_role(user_id)) == "admin":
            return await handler(event, data)

        # 2) –†–∞–∑—Ä–µ—à–∞–µ–º /start, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        if isinstance(event, Message) and (event.text or "").startswith("/"):
            cmd = (event.text or "").split()[0][1:].lower()
            if cmd in self.allowed_cmds:
                return await handler(event, data)

        # 3) –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–ª–ª–±—ç–∫ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª
        if isinstance(event, CallbackQuery) and any(
            (event.data or "").startswith(p) for p in self.allowed_callbacks_prefixes
        ):
            return await handler(event, data)

        # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é ¬´–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é¬ª –ø–æ —Ñ–ª–∞–≥—É sub_verified
        async with db() as conn:
            cur = await conn.execute(
                "SELECT COALESCE(sub_verified,0) FROM users WHERE tg_id=?",
                (user_id,),
            )
            row = await cur.fetchone()
        sub_verified = bool(row and row[0])

        if sub_verified:
            return await handler(event, data)

        # 5) –ë–ª–æ–∫–∏—Ä—É–µ–º: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—ã—Ö–æ–¥–∏–º
        bot: Bot = data["bot"]  # Bot –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ data –∏–∑ aiogram
        if isinstance(event, CallbackQuery):
            try:
                await event.answer(
                    "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
                    show_alert=True,
                )
            except Exception:
                pass
        try:
            await bot.send_message(
                user_id,
                "üîî –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
                reply_markup=subscription_kb(),
            )
        except Exception:
            pass
        return  # –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ


__all__ = ["SubscriptionGuard"]
